AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Assassin Game
  
  SAM Template for Assassin Game application

# Metadata section can be added here if needed

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name
  
  LogRetentionInDays:
    Type: String
    Default: '30'
    AllowedValues:
      - '1'
      - '3'
      - '5'
      - '7'
      - '14'
      - '30'
      - '60'
      - '90'
      - '120'
      - '150'
      - '180'
      - '365'
      - '400'
      - '545'
      - '731'
      - '1827'
      - '3653'
    Description: Number of days to retain logs in CloudWatch
  
  # Parameters for VPC configuration (used in production)
  DeployInVPC:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to deploy Lambda functions in a VPC

  PrivateSubnet1:
    Type: String
    Default: ''
    Description: First private subnet ID for Lambda functions in production

  PrivateSubnet2:
    Type: String
    Default: ''
    Description: Second private subnet ID for Lambda functions in production

  LambdaSecurityGroup:
    Type: String
    Default: ''
    Description: Security group ID for Lambda functions in production

Conditions:
  IsProduction: 
    Fn::Equals:
      - !Ref Environment
      - 'prod'
  UseVPC: 
    Fn::Equals:
      - !Ref DeployInVPC
      - 'true'

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: java17
    Architectures:
      - x86_64
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        LOG_LEVEL: INFO
        ENV: !Ref Environment
        PLAYERS_TABLE_NAME: !Ref PlayerTable
        KILLS_TABLE_NAME: !Ref KillTable
        GAMES_TABLE_NAME: !Ref GameTable
        SAFE_ZONES_TABLE_NAME: !Ref SafeZoneTable
        ASSASSIN_TEST_MODE: false
    Tracing: Active
    # Add X-Ray tracing
    Tags:
      Application: AssassinGame
    # VPC Configuration (applied conditionally)
    VpcConfig:
      Fn::If:
        - UseVPC
        - SecurityGroupIds:
            - !Ref LambdaSecurityGroup
          SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
        - !Ref "AWS::NoValue"

Resources:
  # Cognito resources for authentication
  AssassinUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub assassin-user-pool-${Environment}
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolTags:
        Environment: !Ref Environment
        Project: AssassinGame
  
  AssassinUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub assassin-app-client-${Environment}
      UserPoolId: !Ref AssassinUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      AccessTokenValidity: 1
      IdTokenValidity: 1
      TokenValidityUnits:
        AccessToken: "days"
        IdToken: "days"
        RefreshToken: "days"

  # DynamoDB Tables
  PlayersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Players
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PlayerID
          AttributeType: S
        - AttributeName: Email
          AttributeType: S
        - AttributeName: LeaderboardStatusPartition
          AttributeType: S
        - AttributeName: KillCount
          AttributeType: N
        - AttributeName: GameID
          AttributeType: S
      KeySchema:
        - AttributeName: PlayerID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: KillCountIndex
          KeySchema:
            - AttributeName: LeaderboardStatusPartition
              KeyType: HASH
            - AttributeName: KillCount
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - PlayerName
        - IndexName: GameIdIndex
          KeySchema:
            - AttributeName: GameID
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  KillsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Kills
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: KillerID
          AttributeType: S
        - AttributeName: Time
          AttributeType: S
        - AttributeName: VictimID
          AttributeType: S
        - AttributeName: GameID
          AttributeType: S
      KeySchema:
        - AttributeName: KillerID
          KeyType: HASH
        - AttributeName: Time
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: VictimID-Time-index
          KeySchema:
            - AttributeName: VictimID
              KeyType: HASH
            - AttributeName: Time
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GameID-Time-index
          KeySchema:
            - AttributeName: GameID
              KeyType: HASH
            - AttributeName: Time
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Notifications
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: recipientPlayerId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: notificationId # Optional, but good for unique identification
          AttributeType: S
        # Add other index attributes if needed, e.g., for status-based queries
        # - AttributeName: status
        #   AttributeType: S
      KeySchema:
        - AttributeName: recipientPlayerId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      # GSI for querying by notification ID if needed
      # GlobalSecondaryIndexes:
      #   - IndexName: NotificationIdIndex
      #     KeySchema:
      #       - AttributeName: notificationId
      #         KeyType: HASH
      #     Projection:
      #       ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  GamesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Games
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: GameID
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
        - AttributeName: CreatedAt
          AttributeType: S
      KeySchema:
        - AttributeName: GameID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StatusCreatedAtIndex
          KeySchema:
            - AttributeName: Status
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-WebSocketConnections
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  # API Gateway
  AssassinApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,X-Request-ID'"
        AllowOrigin: "'*'"
      EndpointConfiguration: 
        Type: REGIONAL
      TracingEnabled: true
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt AssassinUserPool.Arn
            Identity:
              Header: Authorization
            # Add other authorizer configurations if needed
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'http://localhost:3001'"
              Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
              Access-Control-Allow-Headers: "'Content-Type, Authorization, X-Amz-Date, X-Api-Key, X-Amz-Security-Token'"
              Access-Control-Allow-Credentials: "'true'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'http://localhost:3001'"
              Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
              Access-Control-Allow-Headers: "'Content-Type, Authorization, X-Amz-Date, X-Api-Key, X-Amz-Security-Token'"
              Access-Control-Allow-Credentials: "'true'"
        UNAUTHORIZED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'http://localhost:3001'"
              Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
              Access-Control-Allow-Headers: "'Content-Type, Authorization, X-Amz-Date, X-Api-Key, X-Amz-Security-Token'"
              Access-Control-Allow-Credentials: "'true'"
        ACCESS_DENIED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'http://localhost:3001'"
              Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
              Access-Control-Allow-Headers: "'Content-Type, Authorization, X-Amz-Date, X-Api-Key, X-Amz-Security-Token'"
              Access-Control-Allow-Credentials: "'true'"
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","path":"$context.path","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength","errorMessage":"$context.error.message"}'
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50
          MetricsEnabled: true
          DataTraceEnabled: true
          LoggingLevel: INFO

  # API Gateway (WebSocket)
  AssassinWebSocketApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub assassin-websocket-api-${Environment}
      StageName: !Ref Environment # Consistent stage naming
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Assassin Game WebSocket API
          version: '1.0'
        paths:
          /$connect:
            post:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations'
                passthroughBehavior: when_no_match
              responses: {}
          /$disconnect:
            post:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations'
                passthroughBehavior: when_no_match
              responses: {}
          /$default: # Default route for messages not matching other routes
            post:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultMessageHandlerFunction.Arn}/invocations'
                passthroughBehavior: when_no_match
              responses: {}
          # Add custom routes here if needed, e.g., /sendmessage
          # /sendmessage:
          #   post:
          #     x-amazon-apigateway-integration: ...
        components: {}

  # Lambda Functions
  # Uncommented functions to enable full application functionality
  PlayerManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.assassin.handlers.PlayerHandler::handleRequest
      Description: Handles player management operations (create, update, delete, get).
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          GAMES_TABLE_NAME: !Ref GamesTable
          LOG_LEVEL: INFO
      VpcConfig: 
        Fn::If:
          - UseVPC
          - SubnetIds: 
              - !Ref PrivateSubnet1
              - !Ref PrivateSubnet2
            SecurityGroupIds: 
              - !Ref LambdaSecurityGroup
          - !Ref AWS::NoValue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
      Events:
        GetPlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/{playerId}
            Method: get
        CreatePlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players
            Method: post
        UpdatePlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/{playerId}
            Method: put
        DeletePlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/{playerId}
            Method: delete
        ListPlayers:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players
            Method: get
        GetMyTarget:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/me/target
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.assassin.handlers.NotificationHandler::processRequest
      Description: Handles notification operations (sending and retrieving notifications).
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          NOTIFICATIONS_TABLE_NAME: !Ref NotificationsTable
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          LOG_LEVEL: INFO
      VpcConfig: 
        Fn::If:
          - UseVPC
          - SubnetIds: 
              - !Ref PrivateSubnet1
              - !Ref PrivateSubnet2
            SecurityGroupIds: 
              - !Ref LambdaSecurityGroup
          - !Ref AWS::NoValue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
      Events:
        CreateNotification:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /notifications
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetPlayerNotifications:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /notifications/player/{playerId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetNotification:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /notifications/{notificationId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        MarkNotificationAsRead:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /notifications/{notificationId}/read
            Method: put

  KillReportingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.assassin.handlers.KillHandler::handleRequest
      Description: Handles kill reporting and validation operations.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          KILLS_TABLE_NAME: !Ref KillsTable
          GAMES_TABLE_NAME: !Ref GamesTable
          GAME_ZONE_STATE_TABLE_NAME: !Ref GameZoneStateTable
          LOG_LEVEL: INFO
      VpcConfig: 
        Fn::If:
          - UseVPC
          - SubnetIds: 
              - !Ref PrivateSubnet1
              - !Ref PrivateSubnet2
            SecurityGroupIds: 
              - !Ref LambdaSecurityGroup
          - !Ref AWS::NoValue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref KillsTable
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
        - DynamoDBWritePolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GameZoneStateTable
      Events:
        ReportKill:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills
            Method: post
        GetKill:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/{killId}
            Method: get
        ListKills:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills
            Method: get
        GetKillsByKiller:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/killer/{killerID}
            Method: get
        GetKillsByVictim:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/victim/{victimID}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetRecentKills:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/recent
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        VerifyKill:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/{killerId}/{killTime}/verify
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetGameTimeline:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameID}/timeline
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GameManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-GameManagementFunction"
      Handler: com.assassin.handlers.GameManagementHandler::handleRequest
      CodeUri: .
      Runtime: java17
      MemorySize: 512
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy: # Allow full access to Game table for management
            TableName: !Ref GamesTable
        # TODO: Add policies if it needs to interact with PlayerTable or other resources
      Environment:
        Variables:
          ENV: !Ref Environment
          LOG_LEVEL: INFO
          GAME_TABLE_NAME: !Ref GamesTable
      Events:
        UpdateBoundary:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/boundary
            Method: put
            # TODO: Add Authorizer if admin/organizer role needed
            # Auth:
            #   Authorizer: CognitoAuthorizer # Or your custom authorizer

  # Safe Zone Handler
  SafeZoneHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.assassin.handlers.SafeZoneHandler::handleRequest
      Description: Handles safe zone management operations (create, get, delete).
      CodeUri: ./
      # Inherits Globals: MemorySize, Timeout, Runtime, Arch, Env, Tracing, Tags, VpcConfig
      Policies:
        # Requires CRUD on SafeZoneTable and potentially Read on GameTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SafeZoneTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable # For validation if needed in service
      Events:
        CreateSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/safezones
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer # TODO: Consider specific permissions (e.g., game admin)
        GetSafeZonesByGame:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/safezones
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # TODO: Or allow public access?
        GetSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /safezones/{safeZoneId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # TODO: Or allow public access?
        DeleteSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /safezones/{safeZoneId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer # TODO: Consider specific permissions (e.g., game admin)
        # Add PUT endpoint for updating safe zones
        UpdateSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /safezones/{safeZoneId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer # Requires authentication, potentially game admin

  AuthenticationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.assassin.handlers.AuthHandler::handleRequest
      Description: Handles authentication and user management.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          USER_POOL_ID: !Ref AssassinUserPool
          CLIENT_ID: !Ref AssassinUserPoolClient
          LOG_LEVEL: INFO
      VpcConfig: 
        Fn::If:
          - UseVPC
          - SubnetIds: 
              - !Ref PrivateSubnet1
              - !Ref PrivateSubnet2
            SecurityGroupIds: 
              - !Ref LambdaSecurityGroup
          - !Ref AWS::NoValue
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminRespondToAuthChallenge
                - cognito-idp:SignUp
                - cognito-idp:InitiateAuth
                - cognito-idp:ConfirmSignUp
                - cognito-idp:ForgotPassword
                - cognito-idp:ConfirmForgotPassword
              Resource: !GetAtt AssassinUserPool.Arn
      Events:
        SignUp:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /auth/signup
            Method: post
            Auth:
              Authorizer: NONE
        SignIn:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /auth/signin
            Method: post
            Auth:
              Authorizer: NONE
        ForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /auth/forgot-password
            Method: post
            Auth:
              Authorizer: NONE
        ResetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /auth/reset-password
            Method: post
            Auth:
              Authorizer: NONE

  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.assassin.handlers.websocket.ConnectHandler::handleRequest
      Description: Handles new WebSocket connections.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref WebSocketConnectionsTable
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBCrudPolicy: # Need write access to save connection
            TableName: !Ref WebSocketConnectionsTable
        # Add Cognito policy if associating connection with authenticated user on connect
        # - Statement: ... (cognito-idp:GetUser policy) ...
      Events:
        ConnectRoute:
          Type: WebSocket # Use WebSocket event type
          Properties:
            ApiId: !Ref AssassinWebSocketApi
            RouteKey: $connect
            # Optional: Add Cognito Authorizer here if needed on connect
            # Authorizer:
            #   AuthorizerId: !Ref CognitoAuthorizerId # Need to define Cognito Authorizer for WebSocket

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.assassin.handlers.websocket.DisconnectHandler::handleRequest
      Description: Handles WebSocket disconnections.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref WebSocketConnectionsTable
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBCrudPolicy: # Need delete access to remove connection
            TableName: !Ref WebSocketConnectionsTable
      Events:
        DisconnectRoute:
          Type: WebSocket
          Properties:
            ApiId: !Ref AssassinWebSocketApi
            RouteKey: $disconnect

  DefaultMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.assassin.handlers.websocket.DefaultMessageHandler::handleRequest
      Description: Handles incoming WebSocket messages.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref WebSocketConnectionsTable # Might need to look up sender
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBReadPolicy: # May need read access
            TableName: !Ref WebSocketConnectionsTable
        # Policy to allow posting messages back to connections
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AssassinWebSocketApi}/*"
      Events:
        DefaultRoute:
          Type: WebSocket
          Properties:
            ApiId: !Ref AssassinWebSocketApi
            RouteKey: $default # Catch-all for messages not matching other routes

  # Location Update Function
  LocationHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: com.assassin.handlers.LocationHandler::handleRequest
      FunctionName: !Sub assassin-location-handler-${Environment}
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          GAMES_TABLE_NAME: !Ref GamesTable
          GAME_ZONE_STATE_TABLE_NAME: !Ref GameZoneStateTable
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBWritePolicy: # Need permission to update player items
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy: # Need to read game boundaries/state
            TableName: !Ref GamesTable
        - DynamoDBReadPolicy: # Need to read zone state
            TableName: !Ref GameZoneStateTable
      Events:
        UpdateLocation:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /location
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer # Requires authentication

  # --- Log Groups ---
  # Uncommented log groups for all functions
  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${Environment}-AssassinApi-AccessLogs"
      RetentionInDays: 30

  PlayerManagementLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-PlayerManagementFunctionLogs"
      RetentionInDays: 30

  NotificationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-NotificationFunctionLogs"
      RetentionInDays: 30
      
  KillReportingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-KillReportingFunctionLogs"
      RetentionInDays: 30

  GameManagementLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-GameManagementFunctionLogs"
      RetentionInDays: 30

  AuthenticationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-AuthenticationFunctionLogs"
      RetentionInDays: 30
      
  GetStatisticsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-GetStatisticsFunctionLogs"
      RetentionInDays: 30

  ConnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-ConnectFunctionLogs"
      RetentionInDays: !Ref LogRetentionInDays

  DisconnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-DisconnectFunctionLogs"
      RetentionInDays: !Ref LogRetentionInDays

  DefaultMessageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-DefaultMessageFunctionLogs"
      RetentionInDays: !Ref LogRetentionInDays

  # CloudWatch Alarms - Keep alarms, they might fail creation if dimensions don't exist yet, but won't cause API error
  ApiGateway5xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-ApiGateway-5xxError"
      AlarmDescription: "Alarm if API Gateway has too many 5xx errors"
      Namespace: "AWS/ApiGateway"
      MetricName: "5XXError"
      Dimensions:
        - Name: ApiName
          Value: !Ref AssassinApi
        - Name: Stage
          Value: !Ref Environment
      Statistic: "Sum"
      Period: 60
      EvaluationPeriods: 5
      Threshold: 5.0
      ComparisonOperator: "GreaterThanThreshold"
      TreatMissingData: "notBreaching"

  LambdaErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-Lambda-Errors"
      AlarmDescription: "Alarm if any Lambda function has too many errors"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Statistic: "Sum"
      Period: 60
      EvaluationPeriods: 5
      Threshold: 5.0
      ComparisonOperator: "GreaterThanThreshold"
      TreatMissingData: "notBreaching"

  DynamoDBThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-DynamoDB-Throttles"
      AlarmDescription: "Alarm if DynamoDB has too many throttled requests"
      Namespace: "AWS/DynamoDB"
      MetricName: "ThrottledRequests"
      Statistic: "Sum"
      Period: 60
      EvaluationPeriods: 5
      Threshold: 10.0
      ComparisonOperator: "GreaterThanThreshold"
      TreatMissingData: "notBreaching"

  # Safe Zones Table
  SafeZoneTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-SafeZones"
      AttributeDefinitions:
        - AttributeName: SafeZoneID # Partition Key
          AttributeType: S
        - AttributeName: GameID     # GSI Partition Key
          AttributeType: S
        # Add other GSI key attributes if needed (e.g., Type or ExpiresAt for sorting)
      KeySchema:
        - AttributeName: SafeZoneID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: GameIdIndex # Must match GAME_ID_INDEX_NAME in Dao
          KeySchema:
            - AttributeName: GameID
              KeyType: HASH
            # Add Sort Key here if needed for the GSI
          Projection:
            ProjectionType: ALL # Or specify projected attributes
      # ProvisionedThroughput or BillingMode:
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Add new table for dynamic game zone state
  GameZoneStateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-GameZoneState"
      BillingMode: PAY_PER_REQUEST # Or provisioned if updates are very frequent/predictable
      AttributeDefinitions:
        - AttributeName: GameID # Partition Key
          AttributeType: S
      KeySchema:
        - AttributeName: GameID
          KeyType: HASH
      # Consider TTL if state becomes irrelevant shortly after game ends
      # TimeToLiveSpecification:
      #   AttributeName: expiryTime
      #   Enabled: true
      SSESpecification:
        SSEEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  # --- Scheduled Task Handler for Zone Updates ---
  ZoneUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.assassin.handlers.ZoneUpdateHandler::handleRequest
      Description: Periodically updates shrinking zone state and applies damage to players outside the zone.
      Runtime: java17
      MemorySize: 512 # Adjust as needed
      Timeout: 60 # Allow enough time to process active games
      CodeUri: ./ # Assumes code is in the root build output
      Environment:
        Variables:
          GAMES_TABLE_NAME: !Ref GameTable
          PLAYERS_TABLE_NAME: !Ref PlayerTable
          GAME_ZONE_STATE_TABLE_NAME: !Ref GameZoneStateTable
          LOG_LEVEL: INFO # Or inherit from Globals
      Policies:
        - DynamoDBReadPolicy: # Read active games
            TableName: !Ref GameTable
        - DynamoDBCrudPolicy: # Read/update players (status, timestamps)
            TableName: !Ref PlayerTable
        - DynamoDBCrudPolicy: # Read/update zone state
            TableName: !Ref GameZoneStateTable
        # Add CloudWatch Logs policy if not automatically handled
        - AWSLambdaBasicExecutionRole # Basic logging permissions
      Events:
        ZoneUpdateSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute) # Run every minute
            Enabled: True # Set to false to disable

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${AssassinApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
  
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref AssassinUserPool
  
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref AssassinUserPoolClient
  
  PlayerTableName:
    Description: "Player DynamoDB table name"
    Value: !Ref PlayersTable
  
  KillTableName:
    Description: "Kill DynamoDB table name"
    Value: !Ref KillsTable
  
  GameTableName:
    Description: "Game DynamoDB table name"
    Value: !Ref GamesTable

  WebSocketApiEndpoint:
    Description: "WebSocket API Gateway endpoint URL"
    Value: !Sub "wss://${AssassinWebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}WebSocket" 